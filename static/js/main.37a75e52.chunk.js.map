{"version":3,"sources":["constants/topics.js","data/slidingWindows.js","data/twoPointers.js","data/intervals.js","data/treeBFS.js","data/treeDFS.js","data/treeBST.js","data/treeTrie.js","data/treeGeneral.js","data/subsetCombination.js","data/backtracking.js","data/binaryHeap.js","data/graph.js","data/topicsMap.js","components/Button.js","components/FlexWrapper.js","components/ProblemDisplay.js","components/Topics.js","App.js","reportWebVitals.js","index.js"],"names":["slidingWindows","twoPointers","intervals","treeGeneral","treeTrie","subsetCombination","backtracking","binaryHeap","graph","treeBFS","treeDFS","treeBST","Object","assign","Subset","Permutations","topicsMap","topicConstants","Button","children","onClick","className","type","size","href","ChildButton","classnames","to","FlexWrapper","justifyContent","direction","ProblemsDisplay","useState","currentProblem","setProblem","names","useParams","problemsMap","topicNamesArray","split","topicName","problemNames","keys","Math","floor","random","length","target","rel","map","problemName","topics","SelectRemoveAllButton","isRemove","join","Topics","history","useHistory","currentTopics","useLocation","pathname","currentTopicsArray","currentTopicsSet","Set","handleTopicSelect","topic","has","delete","add","pathName","Array","from","push","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37a75e52.chunk.js","sourcesContent":["export const slidingWindows = \"Sliding Windows\";\nexport const twoPointers = \"Two Pointers\";\nexport const intervals = \"Intervals\";\nexport const treeBFS = \"Tree - BFS\";\nexport const treeDFS = \"Tree - DFS\";\nexport const treeBST = \"Tree - BST\";\nexport const treeGeneral = \"Tree - General\";\nexport const treeTrie = \"Tree - Trie Variation\";\nexport const subsetCombination = \"Subset and Combination\";\nexport const backtracking = \"Backtracking\";\nexport const binaryHeap = \"Binary Heap\";\nexport const graph = \"Graph\";\n","const slidingWindows = {\n  \"Fruit into Basket\":\n    \"https://leetcode.com/problems/fruit-into-baskets/submissions/\",\n  \"Min Size SubArray Sum\":\n    \"https://leetcode.com/problems/minimum-size-subarray-sum/\",\n  \"Longest Substring without Repeating Char\":\n    \"https://leetcode.com/problems/longest-substring-without-repeating-characters/\",\n  \"Longest Substring with at most K distinct Char\":\n    \"https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/\",\n  \"Min Window Substring\":\n    \"https://leetcode.com/problems/minimum-window-substring/\",\n  \"Longest Repeating Char Replacement\":\n    \"https://leetcode.com/problems/longest-repeating-character-replacement/\",\n  \"Longest Palindrome Substring\":\n    \"https://leetcode.com/problems/longest-palindromic-substring/\",\n};\n\nexport default slidingWindows;\n","const twoPointers = {\n  \"Two Sum - Sorted\":\n    \"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\",\n  \"3 Sum\": \"https://leetcode.com/problems/3sum/\",\n  \"4 Sum\": \"https://leetcode.com/problems/4sum/\",\n  \"Sort Colors\": \"https://leetcode.com/problems/sort-colors/\",\n  \"Intersection of 2 Linked Lists\":\n    \"https://leetcode.com/problems/intersection-of-two-linked-lists/\",\n  \"Merge 2 Sorted Lists\":\n    \"https://leetcode.com/problems/merge-two-sorted-lists/\",\n  \"Merge k Sorted Lists\": \"https://leetcode.com/problems/merge-k-sorted-lists/\",\n};\n\nexport default twoPointers;\n","const intervals = {\n  \"Insert Interval\": \"https://leetcode.com/problems/insert-interval/\",\n  \"Interval List Intersections\":\n    \"https://leetcode.com/problems/interval-list-intersections/\",\n  \"Meeting Rooms\": \"https://leetcode.com/problems/meeting-rooms/\",\n  \"Meeting Rooms II\": \"https://leetcode.com/problems/meeting-rooms-ii/\",\n  \"Merge Intervals\": \"https://leetcode.com/problems/merge-intervals/\",\n  \"My Calendar II\": \"https://leetcode.com/problems/my-calendar-ii/\",\n};\n\nexport default intervals;\n","const treeBFS = {\n  \"Level Order Traversal\":\n    \"https://leetcode.com/problems/binary-tree-level-order-traversal/\",\n  \"Zigzag Level Order Traversal\":\n    \"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\",\n  \"Min Depth of Binary Tree\":\n    \"https://leetcode.com/problems/minimum-depth-of-binary-tree/\",\n  \"Lowest Common Ancestor\":\n    \"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\",\n};\n\nexport default treeBFS;\n","import treeBFS from \"./treeBFS\";\n\nconst treeDFS = treeBFS;\n\nexport default treeDFS;\n","const treeBST = {\n  \"Validate BST\": \"https://leetcode.com/problems/validate-binary-search-tree/\",\n  \"Lowest Common Ancestor of a BST\":\n    \"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\",\n  \"Inorder Successor in a BST\":\n    \"https://leetcode.com/problems/inorder-successor-in-bst/\",\n};\n\nexport default treeBST;\n","const treeTrie = {\n  \"Implement Trie\": \"https://leetcode.com/problems/implement-trie-prefix-tree/\",\n  \"Design Add and Search\":\n    \"https://leetcode.com/problems/design-add-and-search-words-data-structure/\",\n  \"Design Autocomplete\":\n    \"https://leetcode.com/problems/design-search-autocomplete-system/\",\n  \"Word Search II\": \"https://leetcode.com/problems/word-search-ii/\",\n};\n\nexport default treeTrie;\n","import treeDFS from \"./treeDFS\";\nimport treeBST from \"./treeBST\";\n\nlet treeGeneral = {\n  \"Maximum Depth\":\n    \"https://leetcode.com/problems/maximum-depth-of-binary-tree/\",\n  \"Same Tree\": \"https://leetcode.com/problems/same-tree/\",\n  \"Invert Binary Tree\": \"https://leetcode.com/problems/invert-binary-tree/\",\n  \"Maximum Path Sum\":\n    \"https://leetcode.com/problems/binary-tree-maximum-path-sum/\",\n  \"Construct Tree from Preorder and Inorder\":\n    \"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\",\n  \"Serialize and Deserialize\":\n    \"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/\",\n  \"Subtree of Another Tree\":\n    \"https://leetcode.com/problems/subtree-of-another-tree/\",\n};\n\ntreeGeneral = Object.assign(treeDFS, treeBST, treeGeneral);\n\nexport default treeGeneral;\n","const subsetCombination = {\n  Subset: \"https://leetcode.com/problems/subsets/\",\n  \"Subset II\": \"https://leetcode.com/problems/subsets-ii/\",\n  Permutations: \"https://leetcode.com/problems/permutations/\",\n  \"Letter Combinations of a Phone Number\":\n    \"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\",\n};\n\nexport default subsetCombination;\n","const backtracking = {\n  \"N Queens\": \"https://leetcode.com/problems/n-queens/\",\n  \"N Queens II\": \"https://leetcode.com/problems/n-queens-ii/\",\n  \"Letter Combinations of a Phone Number\":\n    \"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\",\n  \"Letter Case Permutation\":\n    \"https://leetcode.com/problems/letter-case-permutation/\",\n  \"Valid Tic Tac Toe\": \"https://leetcode.com/problems/valid-tic-tac-toe-state/\",\n};\n\nexport default backtracking;\n","const binaryHeap = {\n  \"Median from Data Stream\":\n    \"https://leetcode.com/problems/find-median-from-data-stream/\",\n  \"Sort Chars by Frequency\":\n    \"https://leetcode.com/problems/sort-characters-by-frequency/\",\n  \"Kth Largest\":\n    \"https://leetcode.com/problems/kth-largest-element-in-an-array/\",\n  \"Top K Frequent Elements\":\n    \"https://leetcode.com/problems/top-k-frequent-elements/\",\n  \"Rearrange String k Distance Apart\":\n    \"https://leetcode.com/problems/rearrange-string-k-distance-apart/\",\n  \"Task Scheduler\": \"https://leetcode.com/problems/task-scheduler/\",\n};\n\nexport default binaryHeap;\n","const graph = {\n  \"Clone Graph\": \"https://leetcode.com/problems/clone-graph/\",\n  \"Find the Town Judge\": \"https://leetcode.com/problems/find-the-town-judge/\",\n  \"Course Schedule\": \"https://leetcode.com/problems/course-schedule/\",\n  \"Graph Valid Tree\": \"https://leetcode.com/problems/graph-valid-tree/\",\n  \"Evaluate Division\": \"https://leetcode.com/problems/evaluate-division/\",\n};\n\nexport default graph;\n","import * as topicConstants from \"../constants/topics\";\nimport slidingWindows from \"./slidingWindows\";\nimport twoPointers from \"./twoPointers\";\nimport intervals from \"./intervals\";\nimport treeBFS from \"./treeBFS\";\nimport treeDFS from \"./treeDFS\";\nimport treeBST from \"./treeBST\";\nimport treeTrie from \"./treeTrie\";\nimport treeGeneral from \"./treeGeneral\";\nimport subsetCombination from \"./subsetCombination\";\nimport backtracking from \"./backtracking\";\nimport binaryHeap from \"./binaryHeap\";\nimport graph from \"./graph\";\n\nconst topicsMap = {\n  [topicConstants.slidingWindows]: slidingWindows,\n  [topicConstants.twoPointers]: twoPointers,\n  [topicConstants.intervals]: intervals,\n  [topicConstants.treeBFS]: treeBFS,\n  [topicConstants.treeDFS]: treeDFS,\n  [topicConstants.treeBST]: treeBST,\n  [topicConstants.treeGeneral]: treeGeneral,\n  [topicConstants.treeTrie]: treeTrie,\n  [topicConstants.subsetCombination]: subsetCombination,\n  [topicConstants.backtracking]: backtracking,\n  [topicConstants.binaryHeap]: binaryHeap,\n  [topicConstants.graph]: graph,\n};\n\nexport default topicsMap;\n","import classnames from \"classnames\";\nimport { Link } from \"react-router-dom\";\n\nconst Button = ({ children, onClick, className, type, size, href }) => {\n  const ChildButton = () => (\n    <button\n      onClick={onClick}\n      className={classnames(\n        \"App-button\",\n        {\n          \"App-button-danger\": type === \"danger\",\n          \"App-button-small\": size === \"small\",\n        },\n        className\n      )}\n    >\n      {children}\n    </button>\n  );\n\n  if (type === \"link\") {\n    return (\n      <Link className=\"button-link\" to={href}>\n        <ChildButton />\n      </Link>\n    );\n  }\n\n  return <ChildButton />;\n};\n\nexport default Button;\n","import classnames from \"classnames\";\n\nconst FlexWrapper = ({\n  children,\n  className,\n  size = \"100\",\n  justifyContent = \"space-around\",\n  direction = \"row\",\n}) => {\n  return (\n    <div\n      className={classnames(\n        `height-100 flex width-${size} flex-${direction}`,\n        justifyContent,\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default FlexWrapper;\n","import { useParams } from \"react-router-dom\";\nimport topicsMap from \"../data/topicsMap\";\nimport { useState } from \"react\";\nimport Button from \"./Button\";\nimport FlexWrapper from \"./FlexWrapper\";\n\nconst ProblemsDisplay = () => {\n  const [currentProblem, setProblem] = useState(null);\n\n  const { names } = useParams();\n\n  let problemsMap = {};\n  const topicNamesArray = names.split(\"+\");\n\n  for (let topicName of topicNamesArray) {\n    problemsMap = {\n      ...topicsMap[topicName],\n      ...problemsMap,\n    };\n  }\n\n  const problemNames = Object.keys(problemsMap);\n\n  const randomize = () => {\n    return problemNames[Math.floor(Math.random() * problemNames.length)];\n  };\n\n  return (\n    <FlexWrapper\n      size=\"50\"\n      direction=\"column\"\n      justifyContent=\"space-between\"\n      className=\"margin-top-small\"\n    >\n      <FlexWrapper size=\"50\" direction=\"column\">\n        <Button onClick={() => setProblem(randomize())}>Randomize</Button>\n        <Button onClick={() => setProblem(null)}>Show All</Button>\n      </FlexWrapper>\n      <br />\n      <div className=\"text-align-left\">\n        {currentProblem ? (\n          <a\n            href={problemsMap[currentProblem]}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {currentProblem}\n          </a>\n        ) : (\n          <ul>\n            {problemNames.map((problemName) => {\n              return (\n                <li key={problemName}>\n                  <a\n                    href={problemsMap[problemName]}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {problemName}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    </FlexWrapper>\n  );\n};\n\nexport default ProblemsDisplay;\n","import { useHistory, useLocation } from \"react-router-dom\";\nimport * as topicConstants from \"../constants/topics\";\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport Button from \"./Button\";\nimport FlexWrapper from \"./FlexWrapper\";\n\nconst topics = [\n  topicConstants.slidingWindows,\n  topicConstants.twoPointers,\n  topicConstants.intervals,\n  topicConstants.treeGeneral,\n  topicConstants.treeTrie,\n  topicConstants.subsetCombination,\n  topicConstants.backtracking,\n  topicConstants.binaryHeap,\n  topicConstants.graph,\n];\n\nconst SelectRemoveAllButton = ({ isRemove }) => {\n  return (\n    <Button\n      type=\"link\"\n      href={isRemove ? \"/\" : `/topics/${topics.join(\"+\")}`}\n      size=\"small\"\n    >\n      {isRemove ? \"Remove All Topics\" : \"Select All Topics\"}\n    </Button>\n  );\n};\n\nconst Topics = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const currentTopics = location.pathname.split(\"/topics/\")[1] || \"\";\n  const currentTopicsArray = currentTopics.length\n    ? currentTopics.split(\"+\")\n    : [];\n  const currentTopicsSet = new Set(currentTopicsArray);\n\n  const handleTopicSelect = (topic) => {\n    if (currentTopicsSet.has(topic)) {\n      currentTopicsSet.delete(topic);\n    } else {\n      currentTopicsSet.add(topic);\n    }\n    const pathName = Array.from(currentTopicsSet);\n    if (pathName.length) {\n      history.push(`/topics/${pathName.join(\"+\")}`);\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  return (\n    <FlexWrapper size=\"50\" direction=\"column\">\n      <ul>\n        {topics.map((topic) => (\n          <li key={`${topic}-selection`} className=\"margin-small\">\n            <Button\n              onClick={() => handleTopicSelect(topic)}\n              className={classnames(\"width-100\", {\n                \"selected-topic\": currentTopicsSet.has(topic),\n              })}\n            >\n              {topic}\n            </Button>\n          </li>\n        ))}\n        <li>\n          <SelectRemoveAllButton\n            isRemove={currentTopicsSet.size === topics.length}\n          />\n        </li>\n      </ul>\n      <br />\n      <div>\n        <header>Problems from the following topics:</header>\n        <br />\n        <ul>\n          {currentTopicsArray.map((topic) => {\n            return (\n              <li\n                key={`${topic}-selection-removal`}\n                className=\"inline margin-small\"\n              >\n                <Button\n                  size=\"small\"\n                  type=\"danger\"\n                  className=\"pill-button margin-xSmall\"\n                  onClick={() => handleTopicSelect(topic)}\n                >\n                  {topic} X\n                </Button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </FlexWrapper>\n  );\n};\n\nexport default Topics;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ProblemsDisplay from \"./components/ProblemDisplay\";\nimport Topics from \"./components/Topics\";\nimport React from \"react\";\nimport FlexWrapper from \"./components/FlexWrapper\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <Switch>\n            <Route exact path=\"/topics/:names\">\n              <FlexWrapper>\n                <Topics />\n                <ProblemsDisplay />\n              </FlexWrapper>\n            </Route>\n            <Route path=\"/\">\n              <Topics />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}